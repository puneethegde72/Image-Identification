# -*- coding: utf-8 -*-
"""group project (group 13)_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_SICQKhpAOwNM41Iy9N4GJmO4jleH3e7
"""

import tensorflow as tf
from tensorflow.keras import layers
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import zipfile
import numpy as np
import matplotlib.pyplot as plt
from keras.callbacks import EarlyStopping, ReduceLROnPlateau
from keras.regularizers import l2

# Extract the dataset from the zip file
with zipfile.ZipFile('Group_Project_Data 2.zip', 'r') as zip_ref:
    zip_ref.extractall('Group_Project_Data')

train_datagen = ImageDataGenerator(rescale=1./255,
                                   rotation_range=20,
                                   width_shift_range=0.2,
                                   height_shift_range=0.2,
                                   shear_range=0.2,
                                   zoom_range=0.2,
                                   horizontal_flip=True,
                                   fill_mode='nearest')
test_datagen = ImageDataGenerator(rescale=1./255)

train_dir = '/content/Group_Project_Data/Group_Project_Data/Valid'
test_dir = '/content/Group_Project_Data/Group_Project_Data/Train'

valid = train_datagen.flow_from_directory(train_dir,
                                                    target_size=(150, 150),
                                                    batch_size=64,
                                                    class_mode='binary')
test = test_datagen.flow_from_directory(test_dir,
                                                  target_size=(150, 150),
                                                  batch_size=64,
                                                  class_mode='binary')

# model with regularization
model_1 = tf.keras.Sequential([
    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3), kernel_regularizer=l2(0.01)),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu', kernel_regularizer=l2(0.01)),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(128, (3, 3), activation='relu', kernel_regularizer=l2(0.01)),
    layers.MaxPooling2D((2, 2)),
    layers.Flatten(),
    layers.Dense(512, activation='relu', kernel_regularizer=l2(0.01)),
    layers.Dense(1, activation='sigmoid')
])

early_stop = EarlyStopping(monitor='val_loss', patience=5, verbose=1)
reduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.2, patience=2, verbose=1)

model_1.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

history = model_1.fit(valid,
                    steps_per_epoch=valid.samples // valid.batch_size,
                    epochs=50,
                    validation_data=test,
                    validation_steps=test.samples // test.batch_size, callbacks=[early_stop, reduce_lr])

plt.figure(figsize=(12, 4))
plt.subplot(1, 2, 1)
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.legend()
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.title('Training and Validation Loss')

plt.subplot(1, 2, 2)
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.legend()
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.title('Training and Validation Accuracy')
plt.show()

test_images, test_labels = next(test)
test_pred = model_1.predict(test_images)

fake_indices = np.where(test_pred < 0.5)[0]
real_indices = np.where(test_pred >= 0.5)[0]

# plot fake images
plt.figure(figsize=(15, 25))
for i, idx in enumerate(fake_indices[:50]):
    plt.subplot(8, 5, i+1)
    plt.imshow(test_images[idx])
    plt.title('Actual: {:.0f}\nPredicted: {:.0f}'.format(test_labels[idx], test_pred[idx, 0]))
    plt.axis("off")
plt.suptitle('Incorrectly Classified Images')
plt.show()

plt.figure(figsize=(15, 25))
for i, idx in enumerate(real_indices[:40]):
    plt.subplot(8, 5, i+1)
    plt.imshow(test_images[idx])
    plt.title('Actual: {:.0f}\nPredicted: {:.0f}'.format(test_labels[idx], test_pred[idx, 0]))
    plt.axis("off")
plt.suptitle('Correctly Classified Images')
plt.show()

